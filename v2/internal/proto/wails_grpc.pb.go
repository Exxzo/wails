// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.33.0
// source: wails.proto

package wailspb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	WailsService_Call_FullMethodName         = "/wails.v2.WailsService/Call"
	WailsService_StreamEvents_FullMethodName = "/wails.v2.WailsService/StreamEvents"
)

// WailsServiceClient is the client API for WailsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WailsServiceClient interface {
	Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error)
	StreamEvents(ctx context.Context, in *EventSubscribe, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventNotify], error)
}

type wailsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewWailsServiceClient(cc grpc.ClientConnInterface) WailsServiceClient {
	return &wailsServiceClient{cc}
}

func (c *wailsServiceClient) Call(ctx context.Context, in *CallRequest, opts ...grpc.CallOption) (*CallResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CallResponse)
	err := c.cc.Invoke(ctx, WailsService_Call_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wailsServiceClient) StreamEvents(ctx context.Context, in *EventSubscribe, opts ...grpc.CallOption) (grpc.ServerStreamingClient[EventNotify], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &WailsService_ServiceDesc.Streams[0], WailsService_StreamEvents_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[EventSubscribe, EventNotify]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WailsService_StreamEventsClient = grpc.ServerStreamingClient[EventNotify]

// WailsServiceServer is the server API for WailsService service.
// All implementations must embed UnimplementedWailsServiceServer
// for forward compatibility.
type WailsServiceServer interface {
	Call(context.Context, *CallRequest) (*CallResponse, error)
	StreamEvents(*EventSubscribe, grpc.ServerStreamingServer[EventNotify]) error
	mustEmbedUnimplementedWailsServiceServer()
}

// UnimplementedWailsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedWailsServiceServer struct{}

func (UnimplementedWailsServiceServer) Call(context.Context, *CallRequest) (*CallResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Call not implemented")
}
func (UnimplementedWailsServiceServer) StreamEvents(*EventSubscribe, grpc.ServerStreamingServer[EventNotify]) error {
	return status.Errorf(codes.Unimplemented, "method StreamEvents not implemented")
}
func (UnimplementedWailsServiceServer) mustEmbedUnimplementedWailsServiceServer() {}
func (UnimplementedWailsServiceServer) testEmbeddedByValue()                      {}

// UnsafeWailsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WailsServiceServer will
// result in compilation errors.
type UnsafeWailsServiceServer interface {
	mustEmbedUnimplementedWailsServiceServer()
}

func RegisterWailsServiceServer(s grpc.ServiceRegistrar, srv WailsServiceServer) {
	// If the following call pancis, it indicates UnimplementedWailsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&WailsService_ServiceDesc, srv)
}

func _WailsService_Call_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CallRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WailsServiceServer).Call(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: WailsService_Call_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WailsServiceServer).Call(ctx, req.(*CallRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _WailsService_StreamEvents_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EventSubscribe)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(WailsServiceServer).StreamEvents(m, &grpc.GenericServerStream[EventSubscribe, EventNotify]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type WailsService_StreamEventsServer = grpc.ServerStreamingServer[EventNotify]

// WailsService_ServiceDesc is the grpc.ServiceDesc for WailsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var WailsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "wails.v2.WailsService",
	HandlerType: (*WailsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Call",
			Handler:    _WailsService_Call_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StreamEvents",
			Handler:       _WailsService_StreamEvents_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "wails.proto",
}
