package main

import (
    "context"
    "fmt"
    "log"
    "net"
    "os"
    "os/signal"
    "syscall"

    "google.golang.org/grpc"
    "google.golang.org/grpc/reflection"
)

func main() {
    // Create app instance
    app := NewApp()

    // Create gRPC server
    grpcServer := grpc.NewServer()
    
    // Register your service
    // RegisterGreeterServer(grpcServer, app)
    
    // Enable reflection for debugging
    reflection.Register(grpcServer)

    // Start gRPC server
    addr := "127.0.0.1:50051"
    listener, err := net.Listen("tcp", addr)
    if err != nil {
        log.Fatalf("Failed to listen on %s: %v", addr, err)
    }

    log.Printf("gRPC server listening on %s", addr)
    
    // Start server in goroutine
    go func() {
        if err := grpcServer.Serve(listener); err != nil {
            log.Fatalf("Failed to serve gRPC: %v", err)
        }
    }()

    // Call startup if provided
    if app.startup != nil {
        app.startup(context.Background())
    }

    // Wait for interrupt signal
    c := make(chan os.Signal, 1)
    signal.Notify(c, os.Interrupt, syscall.SIGTERM)
    <-c

    log.Println("Shutting down gRPC server...")
    grpcServer.GracefulStop()
}
